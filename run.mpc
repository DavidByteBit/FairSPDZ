# In its current state, this code will not work as it requires other scripts to populate the parties input files.
# This code simply serves as an example of code in MP-SPDZ. It is unoptimized, and not modular. As such, it should
# not serve as an example of what 'good' MP-SPDZ code should look like, just what it can look like.

from Compiler import mpc_math
from Compiler import ml
from Compiler import models
from Compiler import fairness_metrics

import json

# from Compiler.library import public_input()

# program.options_from_args()
#
# try:
#     num_of_parties= int(program.args[1])
#     model_owner_id= int(program.args[2])
#     model_type = program.args[3]
#     all_metadata = program.args[4]
# except:
#     print("WARNING - Could not read args correctly")
#     raise Exception

# @args - Public inputs
settings_map = {}

model_type = settings_map['model_type']

if model_type == "lr":
    all_metadata = settings_map['all_metadata']
    model_owner_id = int(settings_map['model_owner_id'])
    num_of_parties = int(settings_map['num_of_parties'])
    protected_col = int(settings_map["protected_col"])
    protected_col_vals = json.loads(settings_map["protected_col_vals"])

    lr = models.logistic_regression(all_metadata, model_owner_id)
    classifications = lr.classify()
    ground_truth = lr.get_true_labels()
    print_ln("%s", classifications.reveal())

    male, female = fairness_metrics.metric(ground_truth, classifications, lr.get_col(), protected_col,
                                           protected_col_vals).traditional_metrics()

    print_ln("%s", male.reveal())
    print_ln("%s", female.reveal())
